module ApplicationHelper
	#helper_method :resource_name, :resource, :devise_mapping, :resource_class

  def resource_name
    :user
  end
 
  def resource
    @resource ||= User.new
  end

  def resource_class
    User
  end
 
  def devise_mapping
    @devise_mapping ||= Devise.mappings[:user]
  end

  def country_list
    [ "",
      "Afghanistan",
      "Aland Islands",
      "Albania",
      "Algeria",
      "American Samoa",
      "Andorra",
      "Angola",
      "Anguilla",
      "Antarctica",
      "Antigua and Barbuda",
      "Argentina",
      "Armenia",
      "Aruba",
      "Australia",
      "Austria",
      "Azerbaijan",
      "Bahamas",
      "Bahrain",
      "Bangladesh",
      "Barbados",
      "Belarus",
      "Belgium",
      "Belize",
      "Benin",
      "Bermuda",
      "Bhutan",
      "Bolivia",
      "Bonaire, Saint Eustatius and Saba ",
      "Bosnia and Herzegovina",
      "Botswana",
      "Bouvet Island",
      "Brazil",
      "British Indian Ocean Territory",
      "British Virgin Islands",
      "Brunei",
      "Bulgaria",
      "Burkina Faso",
      "Burundi",
      "Cambodia",
      "Cameroon",
      "Canada",
      "Cape Verde",
      "Cayman Islands",
      "Central African Republic",
      "Chad",
      "Chile",
      "China",
      "Christmas Island",
      "Cocos Islands",
      "Colombia",
      "Comoros",
      "Cook Islands",
      "Costa Rica",
      "Croatia",
      "Cuba",
      "Curacao",
      "Cyprus",
      "Czech Republic",
      "Democratic Republic of the Congo",
      "Denmark",
      "Djibouti",
      "Dominica",
      "Dominican Republic",
      "East Timor",
      "Ecuador",
      "Egypt",
      "El Salvador",
      "Equatorial Guinea",
      "Eritrea",
      "Estonia",
      "Ethiopia",
      "Falkland Islands",
      "Faroe Islands",
      "Fiji",
      "Finland",
      "France",
      "French Guiana",
      "French Polynesia",
      "French Southern Territories",
      "Gabon",
      "Gambia",
      "Georgia",
      "Germany",
      "Ghana",
      "Gibraltar",
      "Greece",
      "Greenland",
      "Grenada",
      "Guadeloupe",
      "Guam",
      "Guatemala",
      "Guernsey",
      "Guinea",
      "Guinea-Bissau",
      "Guyana",
      "Haiti",
      "Heard Island and McDonald Islands",
      "Honduras",
      "Hong Kong",
      "Hungary",
      "Iceland",
      "India",
      "Indonesia",
      "Iran",
      "Iraq",
      "Ireland",
      "Isle of Man",
      "Israel",
      "Italy",
      "Ivory Coast",
      "Jamaica",
      "Japan",
      "Jersey",
      "Jordan",
      "Kazakhstan",
      "Kenya",
      "Kiribati",
      "Kosovo",
      "Kuwait",
      "Kyrgyzstan",
      "Laos",
      "Latvia",
      "Lebanon",
      "Lesotho",
      "Liberia",
      "Libya",
      "Liechtenstein",
      "Lithuania",
      "Luxembourg",
      "Macao",
      "Macedonia",
      "Madagascar",
      "Malawi",
      "Malaysia",
      "Maldives",
      "Mali",
      "Malta",
      "Marshall Islands",
      "Martinique",
      "Mauritania",
      "Mauritius",
      "Mayotte",
      "Mexico",
      "Micronesia",
      "Moldova",
      "Monaco",
      "Mongolia",
      "Montenegro",
      "Montserrat",
      "Morocco",
      "Mozambique",
      "Myanmar",
      "Namibia",
      "Nauru",
      "Nepal",
      "Netherlands",
      "Netherlands Antilles",
      "New Caledonia",
      "New Zealand",
      "Nicaragua",
      "Niger",
      "Nigeria",
      "Niue",
      "Norfolk Island",
      "North Korea",
      "Northern Mariana Islands",
      "Norway",
      "Oman",
      "Pakistan",
      "Palau",
      "Palestinian Territory",
      "Panama",
      "Papua New Guinea",
      "Paraguay",
      "Peru",
      "Philippines",
      "Pitcairn",
      "Poland",
      "Portugal",
      "Puerto Rico",
      "Qatar",
      "Republic of the Congo",
      "Reunion",
      "Romania",
      "Russia",
      "Rwanda",
      "Saint Barthelemy",
      "Saint Helena",
      "Saint Kitts and Nevis",
      "Saint Lucia",
      "Saint Martin",
      "Saint Pierre and Miquelon",
      "Saint Vincent and the Grenadines",
      "Samoa",
      "San Marino",
      "Sao Tome and Principe",
      "Saudi Arabia",
      "Senegal",
      "Serbia",
      "Seychelles",
      "Sierra Leone",
      "Singapore",
      "Sint Maarten",
      "Slovakia",
      "Slovenia",
      "Solomon Islands",
      "Somalia",
      "South Africa",
      "South Georgia and the South Sandwich Islands",
      "South Korea",
      "South Sudan",
      "Spain",
      "Sri Lanka",
      "Sudan",
      "Suriname",
      "Svalbard and Jan Mayen",
      "Swaziland",
      "Sweden",
      "Switzerland",
      "Syria",
      "Taiwan",
      "Tajikistan",
      "Tanzania",
      "Thailand",
      "Togo",
      "Tokelau",
      "Tonga",
      "Trinidad and Tobago",
      "Tunisia",
      "Turkey",
      "Turkmenistan",
      "Turks and Caicos Islands",
      "Tuvalu",
      "U.S. Virgin Islands",
      "Uganda",
      "Ukraine",
      "United Arab Emirates",
      "United Kingdom",
      "United States",
      "United States Minor Outlying Islands",
      "Uruguay",
      "Uzbekistan",
      "Vanuatu",
      "Vatican",
      "Venezuela",
      "Vietnam",
      "Wallis and Futuna",
      "Western Sahara",
      "Yemen",
      "Zambia",
      "Zimbabwe"
    ]
  end

  def isced_fos(fos = "")
    res = ""
    equivalence = {
      "110" => "Education, not further defined (05.0, 05.1 - 1, 14, 140)",
      "111" => "Education science (05.7, 05.8 - 142)",
      "112" => "Training for pre-school teachers (143)",
      "113" => "Teacher training without subject specialization (141)",
      "114" => "Teacher training with subject specialization (05.2, 05.3, 05.4, 05.5 - 144, 145, 146)",
      "119" => "Education, not elsewhere classified (05.9 - 149)",
      "188" => "Education, inter-disciplinary programmes",
      "210" => "Arts, not further defined (03.0 - 2, 21, 210)",
      "211" => "Audio-visual techniques and media production (03.4 - 213)",
      "212" => "Fashion, interior and industrial design (02.2, 03.5 - 214)",
      "213" => "Fine arts (03.1 - 211)",
      "214" => "Handicrafts (215)",
      "215" => "Music and performing arts (03.2, 03.3 - 212)",
      "219" => "Arts, not elsewhere classified (03.9 - 219)",
      "220" => "Humanities (except languages), not further defined (08.0 - 2, 22, 220)",
      "221" => "Religion and theology (08.2 - 221)",
      "222" => "History and archaeology (03.6, 08.3, 08.4 - 225)",
      "223" => "Philosophy and ethics (08.1 - 226)",
      "229" => "Humanities (except languages), not elsewhere classified (08.9 - 229)",
      "230" => "Languages, not further defined (08.0 - 2, 22, 220)",
      "231" => "Language acquisition (09.0, 09.2, 09.5, 09.6 - 222)",
      "232" => "Literature and linguistics (09.1, 09.3, 09.4, 09.7 - 223)",
      "239" => "Languages, not elsewhere classified (08.9 - 229)",
      "288" => "Arts and humanities, interdisciplinary programmes",
      "310" => "Social and behavioural sciences, not further defined (14.0 - 3, 31, 310)",
      "311" => "Economics (14.3 - 314)",
      "312" => "Political sciences and civics (14.1, 14.6 - 313)",
      "313" => "Psychology (14.4 - 311)",
      "314" => "Sociology and cultural studies (14.2, 14.7, 14.8 - 312)",
      "319" => "Social and behavioural sciences, not elsewhere classified (14.9 - 319)",
      "320" => "Journalism and information, not further defined (15.0 - 32)",
      "321" => "Journalism and reporting (15.1, 15.2 - 321)",
      "322" => "Library, information and archival studies (15.4, 15.5, 15.6 - 322)",
      "329" => "Journalism and information, not elsewhere classified (15.9 - 329)",
      "388" => "Social sciences, journalism and information, inter-disciplinary programmes",
      "410" => "Business and administration, not further defined (04.0, 04.1, 04.2 - 3, 34, 340)",
      "411" => "Accounting and taxation (04.3 - 344)",
      "412" => "Finance, banking and insurance (343)",
      "413" => "Management and administration (04.4 - 345)",
      "414" => "Marketing and advertising (04.7, 15.3 - 342)",
      "415" => "Secretarial and office work (04.6 - 346)",
      "416" => "Wholesale and retail sales (341)",
      "417" => "Work skills (04.5 - 347)",
      "419" => "Business and administration, not elsewhere classified (04.9 - 349)",
      "421" => "Law (10.0, 10.1, 10.2, 10.3 - 3, 38, 380)",
      "429" => "Law, not elsewhere classified",
      "488" => "Business, administration and law, interdisciplinary programmes",
      "510" => "Biological and related sciences, not further defined (42)",
      "511" => "Biology (13.0, 13.1, 13.4, 13.6 - 421)",
      "512" => "Biochemistry (13.0, 13.1, 13.4, 13.6 - 421)",
      "519" => "Biological and related sciences, not elsewhere classifed (13.9 - 429)",
      "520" => "Environment, not further defined (4, 42)",
      "521" => "Environmental sciences (422)",
      "522" => "Natural environments and wildlife (852)",
      "529" => "Environment, not elsewhere classified (13.9 - 429)",
      "530" => "Physical sciences, not further defined (07.6 - 44, 440)",
      "531" => "Chemistry (13.3 - 442)",
      "532" => "Earth sciences (07.0, 07.1, 07.2, 07.3 - 443)",
      "533" => "Physics (13.2, 13.5, 13.7 - 441)",
      "539" => "Physical sciences, not elsewhere classified (07.9 - 449)",
      "540" => "Mathematics and statistics, not further defined (11.0 - 4, 46)",
      "541" => "Mathematics (11.1 - 461)",
      "542" => "Statistics (11.2, 11.5 - 462)",
      "549" => "Mathematics and statistics, not elsewhere classified (469)",
      "588" => "Natural sciences, mathematics and statistics, inter-disciplinary programmes",
      "610" => "Information and Communication Technologies (ICTs), not further defined (4, 48)",
      "611" => "Computer use (482)",
      "612" => "Database and network design and administration (11.3, 11.4 - 481)",
      "613" => "Software and applications development and analysis (11.3, 11.4 - 481)",
      "619" => "Information and Communication Technologies (ICTs), not elsewhere classified (11.9 - 489)",
      "688" => "Information and Communication Technologies (ICTs), inter-disciplinary programmes",
      "710" => "Engineering and engineering trades, not further defined (06.0 - 5, 52, 520)",
      "711" => "Chemical engineering and processes (06.3 - 524)",
      "712" => "Environmental protection technology (07.4 - 85, 850, 851, 859)",
      "713" => "Electricity and energy (06.2 - 522)",
      "714" => "Electronics and automation (06.5 - 523)",
      "715" => "Mechanics and metal trades (06.1 - 521)",
      "716" => "Motor vehicles, ships and aircraft (06.8 - 525)",
      "719" => "Engineering and engineering trades, not elsewhere classified (06.9 - 529)",
      "720" => "Manufacturing and processing, not further defined (06.6 - 54, 540)",
      "721" => "Food processing (01.3 - 541)",
      "722" => "Materials (glass, paper, plastic and wood) (06.7 - 543)",
      "723" => "Textiles (clothes, footwear and leather) (542)",
      "724" => "Mining and extraction (544)",
      "729" => "Manufacturing and processing, not elsewhere classified (549)",
      "730" => "Architecture and construction, not further defined (02.0 - 58)",
      "731" => "Architecture and town planning (02.1, 02.3, 02.4, 02.5, 07.6 - 581)",
      "732" => "Building and civil engineering (06.4 - 582)",
      "739" => "Architecture and construction, not elsewhere classified (02.9 - 589)",
      "788" => "Engineering, manufacturing and construction, inter-disciplinary programmes",
      "810" => "Agriculture, not further defined (01.0, 01.1 - 6, 62, 620)",
      "811" => "Crop and livestock production (01.7 - 621)",
      "812" => "Horticulture (01.4 - 622)",
      "819" => "Agriculture, not elsewhere classified (01.2, 01.8, 01.9 - 629)",
      "821" => "Forestry (01.6 - 623)",
      "829" => "Forestry, not elsewhere classified (01.2, 01.8, 01.9 - 629)",
      "831" => "Fisheries (01.5 - 624)",
      "839" => "Fisheries, not elsewhere classified (01.2, 01.8, 01.9 - 629)",
      "841" => "Veterinary (12.4 - 64, 640)",
      "849" => "Veterinary, not elsewhere classified",
      "888" => "Agriculture, forestry, fisheries, veterinary, inter-disciplinary programmes",
      "910" => "Health, not further defined (12.0, 12.7 - 7, 72, 720)",
      "911" => "Dental studies (12.3 - 724)",
      "912" => "Medicine (12.1, 12.2 - 721)",
      "913" => "Nursing and midwifery (12.6 - 723)",
      "914" => "Medical diagnostic and treatment technology (12.8 - 725)",
      "915" => "Therapy and rehabilitation (16.3 - 726)",
      "916" => "Pharmacy (12.5 - 727)",
      "917" => "Traditional and complementary medicine and therapy",
      "919" => "Health, not elsewhere classified (12.9 - 729)",
      "920" => "Welfare, not further defined (7, 76)",
      "921" => "Care of the elderly and of disabled adults (14.5 - 762)",
      "922" => "Child care and youth services (761)",
      "923" => "Social work and counselling (14.5 - 762)",
      "929" => "Welfare, not elsewhere classified (769)",
      "988" => "Health and Welfare, inter-disciplinary programmes",
      "1010" => "Personal services, not further defined (8, 81, 810)",
      "1011" => "Domestic services (814)",
      "1012" => "Hair and beauty services (815)",
      "1013" => "Hotel, restaurants and catering (811)",
      "1014" => "Sports (16.1 - 813)",
      "1015" => "Travel, tourism and leisure (16.2 - 812)",
      "1019" => "Personal services, not elsewhere classified (819)",
      "1020" => "Hygiene and occupational health services, not further defined (853)",
      "1021" => "Community sanitation (853)",
      "1022" => "Occupational health and safety (862)",
      "1029" => "Hygiene and occupational health services, not elsewhere classified (853)",
      "1030" => "Security services, not further defined (86, 860)",
      "1031" => "Military and defence (863)",
      "1032" => "Protection of persons and property (861)",
      "1039" => "Security services, not elsewhere classified (869)",
      "1041" => "Transport services (02.6, 16.4 - 84, 840)",
      "1049" => "Transport services, not elsewhere classified",
      "1088" => "Services, inter-disciplinary programmes"
    }
    if (equivalence.key?(fos.to_i.to_s))
        res = equivalence[fos.to_i.to_s]
    end
    res
  end
  def isced_fos_old(fos = "")
    res = ""
    equivalence = {
        "0" => "General programmes",
        "01" => "Basic programmes",
        "08" => "Literacy and numeracy",
        "09" => "Personal development",
        "1" => "Education",
        "14" => "Teacher training and education science",
        "2" => "Humanities and arts",
        "21" => "Arts",
        "22" => "Humanities",
        "3" => "Social sciences, business and law",
        "31" => "Social and behavioural science",
        "32" => "Journalism and information",
        "34" => "Business and administration",
        "38" => "Law",
        "4" => "Science",
        "42" => "Life sciences",
        "44" => "Physical sciences",
        "46" => "Mathematics and statistics",
        "48" => "Computing",
        "5" => "Engineering, manufacturing and construction",
        "52" => "Engineering and engineering trades",
        "54" => "Manufacturing and processing",
        "58" => "Architecture and building",
        "6" => "Agriculture",
        "62" => "Agriculture, forestry and fishery",
        "64" => "Veterinary",
        "7" => "Health and welfare",
        "72" => "Health",
        "76" => "Social services",
        "8" => "Services",
        "81" => "Personal services",
        "84" => "Transport services",
        "85" => "Environmental protection",
        "86" => "Security services"
    }
    if (equivalence.key?(fos.to_s))
        res = equivalence[fos.to_s]
    end
    res
  end

  def country_from_code(code)
    result = ""
    codes = { "" => "",
      "AF" => "Afghanistan",
      "AX" => "Aland Islands",
      "AL" => "Albania",
      "DZ" => "Algeria",
      "AS" => "American Samoa",
      "AD" => "Andorra",
      "AO" => "Angola",
      "AI" => "Anguilla",
      "AQ" => "Antarctica",
      "AG" => "Antigua and Barbuda",
      "AR" => "Argentina",
      "AM" => "Armenia",
      "AW" => "Aruba",
      "AU" => "Australia",
      "AT" => "Austria",
      "AZ" => "Azerbaijan",
      "BS" => "Bahamas",
      "BH" => "Bahrain",
      "BD" => "Bangladesh",
      "BB" => "Barbados",
      "BY" => "Belarus",
      "BE" => "Belgium",
      "BZ" => "Belize",
      "BJ" => "Benin",
      "BM" => "Bermuda",
      "BT" => "Bhutan",
      "BO" => "Bolivia",
      "BQ" => "Bonaire, Saint Eustatius and Saba ",
      "BA" => "Bosnia and Herzegovina",
      "BW" => "Botswana",
      "BV" => "Bouvet Island",
      "BR" => "Brazil",
      "IO" => "British Indian Ocean Territory",
      "VG" => "British Virgin Islands",
      "BN" => "Brunei",
      "BG" => "Bulgaria",
      "BF" => "Burkina Faso",
      "BI" => "Burundi",
      "KH" => "Cambodia",
      "CM" => "Cameroon",
      "CA" => "Canada",
      "CV" => "Cape Verde",
      "KY" => "Cayman Islands",
      "CF" => "Central African Republic",
      "TD" => "Chad",
      "CL" => "Chile",
      "CN" => "China",
      "CX" => "Christmas Island",
      "CC" => "Cocos Islands",
      "CO" => "Colombia",
      "KM" => "Comoros",
      "CK" => "Cook Islands",
      "CR" => "Costa Rica",
      "HR" => "Croatia",
      "CU" => "Cuba",
      "CW" => "Curacao",
      "CY" => "Cyprus",
      "CZ" => "Czech Republic",
      "CD" => "Democratic Republic of the Congo",
      "DK" => "Denmark",
      "DJ" => "Djibouti",
      "DM" => "Dominica",
      "DO" => "Dominican Republic",
      "TL" => "East Timor",
      "EC" => "Ecuador",
      "EG" => "Egypt",
      "SV" => "El Salvador",
      "GQ" => "Equatorial Guinea",
      "ER" => "Eritrea",
      "EE" => "Estonia",
      "ET" => "Ethiopia",
      "FK" => "Falkland Islands",
      "FO" => "Faroe Islands",
      "FJ" => "Fiji",
      "FI" => "Finland",
      "FR" => "France",
      "GF" => "French Guiana",
      "PF" => "French Polynesia",
      "TF" => "French Southern Territories",
      "GA" => "Gabon",
      "GM" => "Gambia",
      "GE" => "Georgia",
      "DE" => "Germany",
      "GH" => "Ghana",
      "GI" => "Gibraltar",
      "GR" => "Greece",
      "GL" => "Greenland",
      "GD" => "Grenada",
      "GP" => "Guadeloupe",
      "GU" => "Guam",
      "GT" => "Guatemala",
      "GG" => "Guernsey",
      "GN" => "Guinea",
      "GW" => "Guinea-Bissau",
      "GY" => "Guyana",
      "HT" => "Haiti",
      "HM" => "Heard Island and McDonald Islands",
      "HN" => "Honduras",
      "HK" => "Hong Kong",
      "HU" => "Hungary",
      "IS" => "Iceland",
      "IN" => "India",
      "ID" => "Indonesia",
      "IR" => "Iran",
      "IQ" => "Iraq",
      "IE" => "Ireland",
      "IM" => "Isle of Man",
      "IL" => "Israel",
      "IT" => "Italy",
      "CI" => "Ivory Coast",
      "JM" => "Jamaica",
      "JP" => "Japan",
      "JE" => "Jersey",
      "JO" => "Jordan",
      "KZ" => "Kazakhstan",
      "KE" => "Kenya",
      "KI" => "Kiribati",
      "XK" => "Kosovo",
      "KW" => "Kuwait",
      "KG" => "Kyrgyzstan",
      "LA" => "Laos",
      "LV" => "Latvia",
      "LB" => "Lebanon",
      "LS" => "Lesotho",
      "LR" => "Liberia",
      "LY" => "Libya",
      "LI" => "Liechtenstein",
      "LT" => "Lithuania",
      "LU" => "Luxembourg",
      "MO" => "Macao",
      "MK" => "Macedonia",
      "MG" => "Madagascar",
      "MW" => "Malawi",
      "MY" => "Malaysia",
      "MV" => "Maldives",
      "ML" => "Mali",
      "MT" => "Malta",
      "MH" => "Marshall Islands",
      "MQ" => "Martinique",
      "MR" => "Mauritania",
      "MU" => "Mauritius",
      "YT" => "Mayotte",
      "MX" => "Mexico",
      "FM" => "Micronesia",
      "MD" => "Moldova",
      "MC" => "Monaco",
      "MN" => "Mongolia",
      "ME" => "Montenegro",
      "MS" => "Montserrat",
      "MA" => "Morocco",
      "MZ" => "Mozambique",
      "MM" => "Myanmar",
      "NA" => "Namibia",
      "NR" => "Nauru",
      "NP" => "Nepal",
      "NL" => "Netherlands",
      "AN" => "Netherlands Antilles",
      "NC" => "New Caledonia",
      "NZ" => "New Zealand",
      "NI" => "Nicaragua",
      "NE" => "Niger",
      "NG" => "Nigeria",
      "NU" => "Niue",
      "NF" => "Norfolk Island",
      "KP" => "North Korea",
      "MP" => "Northern Mariana Islands",
      "NO" => "Norway",
      "OM" => "Oman",
      "PK" => "Pakistan",
      "PW" => "Palau",
      "PS" => "Palestinian Territory",
      "PA" => "Panama",
      "PG" => "Papua New Guinea",
      "PY" => "Paraguay",
      "PE" => "Peru",
      "PH" => "Philippines",
      "PN" => "Pitcairn",
      "PL" => "Poland",
      "PT" => "Portugal",
      "PR" => "Puerto Rico",
      "QA" => "Qatar",
      "CG" => "Republic of the Congo",
      "RE" => "Reunion",
      "RO" => "Romania",
      "RU" => "Russia",
      "RW" => "Rwanda",
      "BL" => "Saint Barthelemy",
      "SH" => "Saint Helena",
      "KN" => "Saint Kitts and Nevis",
      "LC" => "Saint Lucia",
      "MF" => "Saint Martin",
      "PM" => "Saint Pierre and Miquelon",
      "VC" => "Saint Vincent and the Grenadines",
      "WS" => "Samoa",
      "SM" => "San Marino",
      "ST" => "Sao Tome and Principe",
      "SA" => "Saudi Arabia",
      "SN" => "Senegal",
      "RS" => "Serbia",
      "SC" => "Seychelles",
      "SL" => "Sierra Leone",
      "SG" => "Singapore",
      "SX" => "Sint Maarten",
      "SK" => "Slovakia",
      "SI" => "Slovenia",
      "SB" => "Solomon Islands",
      "SO" => "Somalia",
      "ZA" => "South Africa",
      "GS" => "South Georgia and the South Sandwich Islands",
      "KR" => "South Korea",
      "SS" => "South Sudan",
      "ES" => "Spain",
      "LK" => "Sri Lanka",
      "SD" => "Sudan",
      "SR" => "Suriname",
      "SJ" => "Svalbard and Jan Mayen",
      "SZ" => "Swaziland",
      "SE" => "Sweden",
      "CH" => "Switzerland",
      "SY" => "Syria",
      "TW" => "Taiwan",
      "TJ" => "Tajikistan",
      "TZ" => "Tanzania",
      "TH" => "Thailand",
      "TG" => "Togo",
      "TK" => "Tokelau",
      "TO" => "Tonga",
      "TT" => "Trinidad and Tobago",
      "TN" => "Tunisia",
      "TR" => "Turkey",
      "TM" => "Turkmenistan",
      "TC" => "Turks and Caicos Islands",
      "TV" => "Tuvalu",
      "VI" => "U.S. Virgin Islands",
      "UG" => "Uganda",
      "UA" => "Ukraine",
      "AE" => "United Arab Emirates",
      "GB" => "United Kingdom",
      "US" => "United States",
      "UM" => "United States Minor Outlying Islands",
      "UY" => "Uruguay",
      "UZ" => "Uzbekistan",
      "VU" => "Vanuatu",
      "VA" => "Vatican",
      "VE" => "Venezuela",
      "VN" => "Vietnam",
      "WF" => "Wallis and Futuna",
      "EH" => "Western Sahara",
      "YE" => "Yemen",
      "ZM" => "Zambia",
      "ZW" => "Zimbabwe"
    }
    if (codes.key?(code))
      result = codes[code]
    end
    result
  end

  def languages_list
      [
        "",
        "Abkhazian",
        "Afar",
        "Afrikaans",
        "Akan",
        "Albanian",
        "Amharic",
        "Arabic",
        "Aragonese",
        "Armenian",
        "Assamese",
        "Avaric",
        "Avestan",
        "Aymara",
        "Azerbaijani",
        "Bambara",
        "Bashkir",
        "Basque",
        "Belarusian",
        "Bengali",
        "Bihari languages",
        "Bislama",
        "Bosnian",
        "Breton",
        "Bulgarian",
        "Burmese",
        "Catalan, Valencian",
        "Central Khmer",
        "Chamorro",
        "Chechen",
        "Chichewa, Chewa, Nyanja",
        "Chinese",
        "Church Slavonic, Old Bulgarian, Old Church Slavonic",
        "Chuvash",
        "Cornish",
        "Corsican",
        "Cree",
        "Croatian",
        "Czech",
        "Danish",
        "Divehi, Dhivehi, Maldivian",
        "Dutch, Flemish",
        "Dzongkha",
        "English",
        "Esperanto",
        "Estonian",
        "Ewe",
        "Faroese",
        "Fijian",
        "Finnish",
        "French",
        "Fulah",
        "Gaelic, Scottish Gaelic",
        "Galician",
        "Ganda",
        "Georgian",
        "German",
        "Gikuyu, Kikuyu",
        "Greek (Modern)",
        "Greenlandic, Kalaallisut",
        "Guarani",
        "Gujarati",
        "Haitian, Haitian Creole",
        "Hausa",
        "Hebrew",
        "Herero",
        "Hindi",
        "Hiri Motu",
        "Hungarian",
        "Icelandic",
        "Ido",
        "Igbo",
        "Indonesian",
        "Interlingua (International Auxiliary Language Association)",
        "Interlingue",
        "Inuktitut",
        "Inupiaq",
        "Irish",
        "Italian",
        "Japanese",
        "Javanese",
        "Kannada",
        "Kanuri",
        "Kashmiri",
        "Kazakh",
        "Kinyarwanda",
        "Komi",
        "Kongo",
        "Korean",
        "Kwanyama, Kuanyama",
        "Kurdish",
        "Kyrgyz",
        "Lao",
        "Latin",
        "Latvian",
        "Letzeburgesch, Luxembourgish",
        "Limburgish, Limburgan, Limburger",
        "Lingala",
        "Lithuanian",
        "Luba-Katanga",
        "Macedonian",
        "Malagasy",
        "Malay",
        "Malayalam",
        "Maltese",
        "Manx",
        "Maori",
        "Marathi",
        "Marshallese",
        "Moldovan, Moldavian, Romanian",
        "Mongolian",
        "Nauru",
        "Navajo, Navaho",
        "Northern Ndebele",
        "Ndonga",
        "Nepali",
        "Northern Sami",
        "Norwegian",
        "Norwegian Bokmål",
        "Norwegian Nynorsk",
        "Nuosu, Sichuan Yi",
        "Occitan (post 1500)",
        "Ojibwa",
        "Oriya",
        "Oromo",
        "Ossetian, Ossetic",
        "Pali",
        "Panjabi, Punjabi",
        "Pashto, Pushto",
        "Persian",
        "Polish",
        "Portuguese",
        "Quechua",
        "Romansh",
        "Rundi",
        "Russian",
        "Samoan",
        "Sango",
        "Sanskrit",
        "Sardinian",
        "Serbian",
        "Shona",
        "Sindhi",
        "Sinhala, Sinhalese",
        "Slovak",
        "Slovenian",
        "Somali",
        "Sotho, Southern",
        "South Ndebele",
        "Spanish, Castilian",
        "Sundanese",
        "Swahili",
        "Swati",
        "Swedish",
        "Tagalog",
        "Tahitian",
        "Tajik",
        "Tamil",
        "Tatar",
        "Telugu",
        "Thai",
        "Tibetan",
        "Tigrinya",
        "Tonga (Tonga Islands)",
        "Tsonga",
        "Tswana",
        "Turkish",
        "Turkmen",
        "Twi",
        "Uighur, Uyghur",
        "Ukrainian",
        "Urdu",
        "Uzbek",
        "Venda",
        "Vietnamese",
        "Volap_k",
        "Walloon",
        "Welsh",
        "Western Frisian",
        "Wolof",
        "Xhosa",
        "Yiddish",
        "Yoruba",
        "Zhuang, Chuang",
        "Zulu"
      ]
  end

  def csv_fields
    {
        "personal" =>[
          "user[email]",
          "user[first_name]",
          "user[family_name]",
          "user[birth_date]",
          "user[born_place]",
          "user[nationality]",
          "user[sex]",
          "user[permanent_adress]",
          "user[phone_number]",
          "user[seeking_degree]",
          "user[progress_status]",
          "user[ni_type]",
          "user[created_at]",
          "user[updated_at]"
        ],
        "learning_agreement" => [
            "user[learning_agreement_subjects][subject]",
        ],
        "application_form" => [
          "user[student_application_form][inst_sending_name]",
          "user[student_application_form][erasmus_code]",
          "user[student_application_form][academic_year]",
          "user[student_application_form][programme]",
          "user[student_application_form][field_of_study]",
          "user[student_application_form][purpose_of_stay]",
          "user[student_application_form][other_purpose]",
          "user[student_application_form][mother_tongue]",
          "user[student_application_form][language_instruction]",
          "user[student_application_form][current_diploma_degree]",
          "user[student_application_form][year_attended]",
          "user[student_application_form][specialization_area]",
          "user[student_application_form][already_study_abroad]",
          "user[student_application_form][where_study_abroad]",
          "user[student_application_form][where_institution_abroad]",
          "user[student_application_form][no_work_experience]"
        ]
    }
  end

  def csv_field_values
    {
        "personal" =>[
          "Email",
          "First Name",
          "Family Name",
          "Birth Date",
          "Born place",
          "Nationality",
          "Sex",
          "Permanent address",
          "Phone Number",
          "Seeking Degree",
          "Progress status",
          "Identification type",
          "User creation date",
          "User last update date",
        ],
        "learning_agreement" => [
          "Learning Agreement Subjects"
        ],
        "application_form" => [
            "Institution Sending Name",
            "Erasmus Code",
            "Academic year",
            "Programme",
            "Field of Study",
            "Purpose of stay",
            "Other purpose",
            "Mother tongue",
            "Language instruction",
            "Current diploma degree",
            "Year attended",
            "Specialization area",
            "Already studied abroad",
            "Where study abroad",
            "Where institution abroad",
            "No work experience"
        ],

    }
  end

  def toNumeral(number)
    numeralhash = {1=>"first", 2=>"second", 3=>"third", 4=>"fourth",5=>"fifth",6=>"sixth",7=>"seventh"}
    if numeralhash.has_key?number
      numeralhash[number]
    else
      "first"
    end
  end

  def getFilterURL(value, params, main)
    url = "/erasmus/admin_dashboard?"
    if (!params[:period].blank?)
      url += "period=#{params[:period]}&"
    end
    if (!params[:university].blank?)
      url += "university=#{params[:university]}&"
    end
    if (!params[:progress_state].blank?)
      url += "progress_state=#{params[:progress_state]}&"
    end
    if (!params[:page].blank?)
      url += "page=#{params[:page]}&"
    end
    if (!params[:pageReg].blank?)
      url += "pageReg=#{params[:pageReg]}&"
    end
    if (!params[:name].blank?)
      url += "name=#{params[:name]}&"
    end
    url += "orderby=#{value}&order=#{params[:orderby] == value ? ((params[:order].blank? or params[:order].downcase == "desc")? "ASC" : "DESC") : "DESC"}"
    unless main
      url += "&archived=true"
    end
    url
  end

  def getFilterClass(value, params)
    (params[:orderby] == value or (value === "family_name" and params[:orderby].blank?)) ? "order order-#{(params[:order].blank? or params[:order].downcase == "asc") ? 'asc': 'desc'}" : ""
  end
 end

